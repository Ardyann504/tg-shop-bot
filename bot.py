import os
import re
import sqlite3
import asyncio
from contextlib import closing

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# ================== ENV ==================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CURRENCY = os.getenv("CURRENCY", "RUB")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

if not BOT_TOKEN:
    raise SystemExit("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# === –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–ü–û–ú–ï–ù–ò –í–ù–ò–ó–£ –ù–ê –°–í–û–ò!) ===
PAY_INSTRUCTIONS = (
    "üí≥ –û–ø–ª–∞—Ç–∞: –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É `1234 5678 9012 3456`\n"
    "–∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É `+7 900 000-00-00`\n\n"
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç."
)

# ================== DB ===================
DB_PATH = "db.sqlite3"

def db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with closing(db()) as conn, conn:
        conn.executescript("""
        PRAGMA journal_mode=WAL;

        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            price_cents INTEGER NOT NULL,
            currency TEXT NOT NULL DEFAULT 'RUB',
            photo_url TEXT,
            is_active INTEGER NOT NULL DEFAULT 1
        );

        CREATE TABLE IF NOT EXISTS carts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            status TEXT NOT NULL DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS cart_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cart_id INTEGER NOT NULL REFERENCES carts(id) ON DELETE CASCADE,
            product_id INTEGER NOT NULL REFERENCES products(id),
            qty INTEGER NOT NULL
        );

        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            total_cents INTEGER NOT NULL,
            currency TEXT NOT NULL,
            status TEXT NOT NULL DEFAULT 'placed',  -- placed, done, canceled
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            note TEXT
        );

        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
            product_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            price_cents INTEGER NOT NULL,
            qty INTEGER NOT NULL
        );
        """)

        # –ó–∞—Å–µ–µ–º 3 —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        c = conn.execute("SELECT COUNT(*) as c FROM products").fetchone()["c"]
        if c == 0:
            conn.executemany(
                "INSERT INTO products(title, description, price_cents, currency, photo_url) VALUES(?,?,?,?,?)",
                [
                    ("–§—É—Ç–±–æ–ª–∫–∞", "100% —Ö–ª–æ–ø–æ–∫, —É–Ω–∏—Å–µ–∫—Å", 19900, CURRENCY, "https://picsum.photos/seed/t1/800/500"),
                    ("–ö—Ä—É–∂–∫–∞", "–ö–µ—Ä–∞–º–∏–∫–∞, 350 –º–ª", 9900, CURRENCY, "https://picsum.photos/seed/t2/800/500"),
                    ("–ù–∞–∫–ª–µ–π–∫–∏", "–ù–∞–±–æ—Ä 5 —à—Ç.", 4900, CURRENCY, "https://picsum.photos/seed/t3/800/500"),
                ]
            )

def list_products():
    with closing(db()) as conn:
        return conn.execute("SELECT * FROM products WHERE is_active=1 ORDER BY id").fetchall()

def get_or_create_cart(user_id: int) -> int:
    with closing(db()) as conn, conn:
        r = conn.execute("SELECT id FROM carts WHERE user_id=? AND status='active'", (user_id,)).fetchone()
        if r: return r["id"]
        cur = conn.execute("INSERT INTO carts(user_id) VALUES(?)", (user_id,))
        return cur.lastrowid

def cart_items(user_id: int):
    with closing(db()) as conn:
        cart_id = get_or_create_cart(user_id)
        return conn.execute("""
            SELECT ci.id, p.id AS product_id, p.title, p.price_cents, p.currency, ci.qty
            FROM cart_items ci JOIN products p ON p.id=ci.product_id
            WHERE ci.cart_id=?""", (cart_id,)).fetchall()

def add_to_cart(user_id: int, product_id: int, delta: int):
    with closing(db()) as conn, conn:
        cart_id = get_or_create_cart(user_id)
        row = conn.execute("SELECT id, qty FROM cart_items WHERE cart_id=? AND product_id=?",
                           (cart_id, product_id)).fetchone()
        if row:
            new_qty = row["qty"] + delta
            if new_qty <= 0:
                conn.execute("DELETE FROM cart_items WHERE id=?", (row["id"],))
            else:
                conn.execute("UPDATE cart_items SET qty=? WHERE id=?", (new_qty, row["id"]))
        elif delta > 0:
            conn.execute("INSERT INTO cart_items(cart_id, product_id, qty) VALUES(?,?,?)",
                         (cart_id, product_id, 1))

def delete_from_cart(user_id: int, product_id: int):
    with closing(db()) as conn, conn:
        cart_id = get_or_create_cart(user_id)
        conn.execute("DELETE FROM cart_items WHERE cart_id=? AND product_id=?", (cart_id, product_id))

def clear_cart(user_id: int):
    with closing(db()) as conn, conn:
        cart_id = get_or_create_cart(user_id)
        conn.execute("DELETE FROM cart_items WHERE cart_id=?", (cart_id,))

def cart_total_cents(user_id: int) -> int:
    return sum(r["price_cents"] * r["qty"] for r in cart_items(user_id))

# ================ UI =================
def kb_main():
    kb = InlineKeyboardBuilder()
    kb.button(text="üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    kb.adjust(2,1)
    return kb.as_markup()

def cart_text(uid: int) -> str:
    items = cart_items(uid)
    if not items: return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines = []; total = 0
    for r in items:
        s = r["price_cents"] * r["qty"]; total += s
        lines.append(f"{r['title']} √ó {r['qty']} ‚Äî {s/100:.2f} {CURRENCY}")
    lines.append(f"\n–ò—Ç–æ–≥–æ: *{total/100:.2f} {CURRENCY}*")
    return "\n".join(lines)

def cart_kb(uid: int):
    items = cart_items(uid)
    kb = InlineKeyboardBuilder()
    for r in items:
        pid = r["product_id"]
        kb.button(text=f"‚ûñ {r['title']}", callback_data=f"dec:{pid}")
        kb.button(text=f"‚ûï {r['title']}", callback_data=f"inc:{pid}")
        kb.button(text=f"üóë {r['title']}", callback_data=f"del:{pid}")
    if items:
        kb.button(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")
    kb.button(text="‚¨ÖÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.adjust(2)
    return kb.as_markup()

# ============== HANDLERS ==============
@dp.message(Command("start"))
async def start(m: Message):
    await m.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–∫–∞–∑.\n"
        "–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.",
        reply_markup=kb_main()
    )

@dp.callback_query(F.data == "catalog")
async def show_catalog(cq: CallbackQuery):
    prods = list_products()
    if not prods:
        await cq.message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç."); await cq.answer(); return
    for p in prods:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add:{p['id']}")
        kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
        kb.adjust(1,1)
        caption = f"*{p['title']}* ‚Äî {p['price_cents']/100:.2f} {p['currency']}\n{p['description'] or ''}"
        await cq.message.answer_photo(
            photo=p["photo_url"] or "https://picsum.photos/seed/none/800/500",
            caption=caption,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb.as_markup()
        )
    await cq.answer()

@dp.callback_query(F.data.startswith("add:"))
async def add(cq: CallbackQuery):
    pid = int(cq.data.split(":")[1])
    add_to_cart(cq.from_user.id, pid, +1)
    await cq.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@dp.callback_query(F.data == "cart")
async def cart(cq: CallbackQuery):
    await cq.message.answer(cart_text(cq.from_user.id),
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=cart_kb(cq.from_user.id))
    await cq.answer()

@dp.callback_query(F.data.startswith(("inc:", "dec:", "del:")))
async def qty(cq: CallbackQuery):
    action, pid = cq.data.split(":"); pid = int(pid)
    if action == "inc": add_to_cart(cq.from_user.id, pid, +1)
    elif action == "dec": add_to_cart(cq.from_user.id, pid, -1)
    elif action == "del": delete_from_cart(cq.from_user.id, pid)
    await cq.message.edit_text(cart_text(cq.from_user.id),
                               parse_mode=ParseMode.MARKDOWN,
                               reply_markup=cart_kb(cq.from_user.id))
    await cq.answer()

@dp.callback_query(F.data == "clear")
async def clear(cq: CallbackQuery):
    clear_cart(cq.from_user.id)
    await cq.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=kb_main())
    await cq.answer()

@dp.callback_query(F.data == "checkout")
async def checkout(cq: CallbackQuery):
    uid = cq.from_user.id
    items = cart_items(uid)
    if not items:
        await cq.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True); return

    total = cart_total_cents(uid)

    # —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (–±–µ–∑ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã)
    with closing(db()) as conn, conn:
        cur = conn.execute(
            "INSERT INTO orders(user_id, total_cents, currency, status) VALUES(?,?,?,?)",
            (uid, total, CURRENCY, "placed")
        )
        order_id = cur.lastrowid
        for r in items:
            conn.execute(
                "INSERT INTO order_items(order_id, product_id, title, price_cents, qty) VALUES(?,?,?,?,?)",
                (order_id, r["product_id"], r["title"], r["price_cents"], r["qty"])
            )
        # –æ—á–∏—Å—Ç–∏–º –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–∫—Ä–æ–µ–º —Ç–µ–∫—É—â—É—é
        cart_id = get_or_create_cart(uid)
        conn.execute("DELETE FROM cart_items WHERE cart_id=?", (cart_id,))
        conn.execute("UPDATE carts SET status='ordered' WHERE id=?", (cart_id,))

    text = (
        f"üßæ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω –Ω–∞ —Å—É–º–º—É *{total/100:.2f} {CURRENCY}*\n\n"
        f"{PAY_INSTRUCTIONS}"
    )
    await cq.message.answer(text, parse_mode=ParseMode.MARKDOWN)
    await cq.answer()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üÜï –ó–∞–∫–∞–∑ #{order_id} –æ—Ç @{cq.from_user.username or uid}\n"
                f"–°—É–º–º–∞: {total/100:.2f} {CURRENCY}"
            )
        except Exception:
            pass

# -------- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ --------
@dp.callback_query(F.data == "support")
async def support_btn(cq: CallbackQuery):
    await cq.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: /support –≤–∞—à_—Ç–µ–∫—Å—Ç")
    await cq.answer()

@dp.message(Command("support"))
async def support_cmd(m: Message):
    text = m.text.partition(" ")[2].strip()
    if not text:
        await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ: /support –≤–∞—à_–≤–æ–ø—Ä–æ—Å"); return
    await m.answer("üì® –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{m.from_user.username or '‚Äî'} (id: {m.from_user.id}):\n{text}"
            )
        except Exception:
            pass
# -------- –û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º --------
@dp.message(Command("reply"))
async def admin_reply(m: Message):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if not (ADMIN_CHAT_ID and m.from_user.id == ADMIN_CHAT_ID):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    # 1) –£–¥–æ–±–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –†–ï–ü–õ–ê–ï–ú –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç–∞
    if m.reply_to_message:
        src = (m.reply_to_message.text or "") + "\n" + (m.reply_to_message.caption or "")
        # –ò—â–µ–º (id: 123456789)
        import re
        id_match = re.search(r"id:\s*(\d+)", src)
        if id_match:
            user_id = int(id_match.group(1))
            reply_text = m.text.partition(" ")[2].strip()  # –≤—Å—ë –ø–æ—Å–ª–µ /reply
            if not reply_text:
                return await m.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ /reply")
            try:
                await bot.send_message(user_id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}")
                return await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                return await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        else:
            # –µ—Å–ª–∏ id –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å @username –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            uname = re.search(r"@([A-Za-z0-9_]{5,})", src)
            if uname:
                try:
                    ch = await bot.get_chat("@"+uname.group(1))
                    user_id = ch.id
                    reply_text = m.text.partition(" ")[2].strip()
                    if not reply_text:
                        return await m.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ /reply")
                    await bot.send_message(user_id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}")
                    return await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                except Exception:
                    pass  # —É–ø–∞–¥—ë–º –≤ –≤–∞—Ä–∏–∞–Ω—Ç B

    # 2) –Ø–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: /reply <user_id|@username> <—Ç–µ–∫—Å—Ç>
    parts = m.text.split(maxsplit=2)
    if len(parts) < 3:
        return await m.answer(
            "–§–æ—Ä–º–∞—Ç:\n"
            "/reply <user_id –∏–ª–∏ @username> <—Ç–µ–∫—Å—Ç>\n"
            "–ò–õ–ò: –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–æ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ: /reply –≤–∞—à_—Ç–µ–∫—Å—Ç"
        )

    target = parts[1]
    reply_text = parts[2].strip()
    if not reply_text:
        return await m.answer("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")

    user_id = None
    if target.isdigit():
        user_id = int(target)
    elif target.startswith("@"):
        try:
            ch = await bot.get_chat(target)
            user_id = ch.id
        except Exception:
            return await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –ø–∏—Å–∞–ª –±–æ—Ç—É.")

    if not user_id:
        return await m.answer("–ù–µ –ø–æ–Ω—è–ª, –∫–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º. –£–∫–∞–∂–∏ —á–∏—Å–ª–æ–≤–æ–π id –∏–ª–∏ @username.")

    try:
        await bot.send_message(user_id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}")
        await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")

# ----- –ü—Ä–æ—Å—Ç—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_CHAT_ID) -----
def is_admin(uid: int) -> bool:
    return ADMIN_CHAT_ID and uid == ADMIN_CHAT_ID

# /addp –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; https://...
@dp.message(Command("addp"))
async def add_product(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    raw = m.text.partition(" ")[2]
    parts = [p.strip() for p in raw.split(";")]
    if len(parts) < 2:
        return await m.answer('–§–æ—Ä–º–∞—Ç: /addp –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; https://photo\n(–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    title = parts[0]
    try:
        price_cents = int(round(float(parts[1].replace(",", ".")) * 100))
    except Exception:
        return await m.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 199.00)")
    desc = parts[2] if len(parts) > 2 else ""
    photo = parts[3] if len(parts) > 3 else None
    with closing(db()) as conn, conn:
        conn.execute(
            "INSERT INTO products(title, description, price_cents, currency, photo_url) VALUES(?,?,?,?,?)",
            (title, desc, price_cents, CURRENCY, photo)
        )
    await m.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ö–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ.")

# /hidep 3  (—Å–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id)
@dp.message(Command("hidep"))
async def hide_product(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    pid = m.text.strip().split(" ")
    if len(pid) < 2 or not pid[1].isdigit():
        return await m.answer("–§–æ—Ä–º–∞—Ç: /hidep ID")
    with closing(db()) as conn, conn:
        conn.execute("UPDATE products SET is_active=0 WHERE id=?", (int(pid[1]),))
    await m.answer("‚úÖ –¢–æ–≤–∞—Ä —Å–∫—Ä—ã—Ç.")

# /ls   (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤)
@dp.message(Command("ls"))
async def listp(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    prods = list_products()
    if not prods: return await m.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
    text = "–¢–æ–≤–∞—Ä—ã:\n" + "\n".join([f"{p['id']}. {p['title']} ‚Äî {p['price_cents']/100:.2f} {p['currency']}" for p in prods])
    await m.answer(text)


# /editp id ; –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; https://—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ
@dp.message(Command("editp"))
async def edit_product(m: Message):
    if not (ADMIN_CHAT_ID and m.from_user.id == ADMIN_CHAT_ID):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    raw = m.text.partition(" ")[2]
    parts = [p.strip() for p in raw.split(";")]
    if len(parts) < 2 or not parts[0].isdigit():
        return await m.answer(
            "–§–æ—Ä–º–∞—Ç: /editp id ; –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; https://—Å—Å—ã–ª–∫–∞\n"
            "(–ù–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ)"
        )

    pid = int(parts[0])
    updates = {}
    if len(parts) > 1 and parts[1]:
        updates["title"] = parts[1]
    if len(parts) > 2 and parts[2]:
        try:
            updates["price_cents"] = int(round(float(parts[2].replace(",", ".")) * 100))
        except Exception:
            return await m.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 199.00)")
    if len(parts) > 3:
        updates["description"] = parts[3]
    if len(parts) > 4:
        updates["photo_url"] = parts[4]

    if not updates:
        return await m.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

    q = "UPDATE products SET " + ", ".join(f"{k}=?" for k in updates.keys()) + " WHERE id=?"
    params = list(updates.values()) + [pid]

    with closing(db()) as conn, conn:
        conn.execute(q, params)

    await m.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{pid} –æ–±–Ω–æ–≤–ª—ë–Ω.")


# /adminhelp ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
@dp.message(Command("adminhelp"))
async def admin_help(m: Message):
    if not (ADMIN_CHAT_ID and m.from_user.id == ADMIN_CHAT_ID):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    text = (
        "üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/ls ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/addp –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; —Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/hidep id ‚Äî —Å–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/editp id ; –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; —Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/reply <user_id/@username> —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å\n"
        "/adminhelp ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
    )
    await m.answer(text)


# =============== ENTRY ===============
async def main():
    init_db()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä—É—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã). –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
