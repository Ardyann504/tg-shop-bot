import os
import re
import sqlite3
import asyncio
from contextlib import closing

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# ================== ENV ==================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CURRENCY = os.getenv("CURRENCY", "RUB")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

if not BOT_TOKEN:
    raise SystemExit("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# === –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–ü–û–ú–ï–ù–ò –í–ù–ò–ó–£ –ù–ê –°–í–û–ò!) ===
PAY_INSTRUCTIONS = (
    "üí≥ –û–ø–ª–∞—Ç–∞: –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É `1234 5678 9012 3456`\n"
    "–∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É `+7 900 000-00-00`\n\n"
    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç."
)

# ================== DB ===================
DB_PATH = "db.sqlite3"

def db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with closing(db()) as conn, conn:
        conn.executescript("""
        PRAGMA journal_mode=WAL;

        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            price_cents INTEGER NOT NULL,
            currency TEXT NOT NULL DEFAULT 'RUB',
            photo_url TEXT,
            is_active INTEGER NOT NULL DEFAULT 1
        );

        CREATE TABLE IF NOT EXISTS carts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            status TEXT NOT NULL DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        CREATE TABLE IF NOT EXISTS cart_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cart_id INTEGER NOT NULL REFERENCES carts(id) ON DELETE CASCADE,
            product_id INTEGER NOT NULL REFERENCES products(id),
            qty INTEGER NOT NULL
        );

        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            total_cents INTEGER NOT NULL,
            currency TEXT NOT NULL,
            status TEXT NOT NULL DEFAULT 'placed',  -- placed, done, canceled
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            note TEXT
        );

        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
            product_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            price_cents INTEGER NOT NULL,
            qty INTEGER NOT NULL
        );
                CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            city_code TEXT,
            city_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
""")

        # –ó–∞—Å–µ–µ–º 3 —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        c = conn.execute("SELECT COUNT(*) as c FROM products").fetchone()["c"]
        if c == 0:
            conn.executemany(
                "INSERT INTO products(title, description, price_cents, currency, photo_url) VALUES(?,?,?,?,?)",
                [
                    ("–§—É—Ç–±–æ–ª–∫–∞", "100% —Ö–ª–æ–ø–æ–∫, —É–Ω–∏—Å–µ–∫—Å", 19900, CURRENCY, "https://picsum.photos/seed/t1/800/500"),
                    ("–ö—Ä—É–∂–∫–∞", "–ö–µ—Ä–∞–º–∏–∫–∞, 350 –º–ª", 9900, CURRENCY, "https://picsum.photos/seed/t2/800/500"),
                    ("–ù–∞–∫–ª–µ–π–∫–∏", "–ù–∞–±–æ—Ä 5 —à—Ç.", 4900, CURRENCY, "https://picsum.photos/seed/t3/800/500"),
                ]
            )

def list_products():
    with closing(db()) as conn:
        return conn.execute("SELECT * FROM products WHERE is_active=1 ORDER BY id").fetchall()

def get_user_city(user_id: int):
    with closing(db()) as conn:
        row = conn.execute(
            "SELECT city_code, city_name FROM users WHERE user_id=?",
            (user_id,)
        ).fetchone()
        return (row["city_code"], row["city_name"]) if row else (None, None)

def set_user_city(user_id: int, code: str, name: str):
    with closing(db()) as conn, conn:
        exists = conn.execute("SELECT 1 FROM users WHERE user_id=?", (user_id,)).fetchone()
        if exists:
            conn.execute(
                "UPDATE users SET city_code=?, city_name=?, updated_at=CURRENT_TIMESTAMP WHERE user_id=?",
                (code, name, user_id)
            )
        else:
            conn.execute(
                "INSERT INTO users(user_id, city_code, city_name) VALUES(?,?,?)",
                (user_id, code, name)
            )

def get_or_create_cart(user_id: int) -> int:
    with closing(db()) as conn, conn:
        r = conn.execute("SELECT id FROM carts WHERE user_id=? AND status='active'", (user_id,)).fetchone()
        if r: return r["id"]
        cur = conn.execute("INSERT INTO carts(user_id) VALUES(?)", (user_id,))
        return cur.lastrowid

def cart_items(user_id: int):
    with closing(db()) as conn:
        cart_id = get_or_create_cart(user_id)
        return conn.execute("""
            SELECT ci.id, p.id AS product_id, p.title, p.price_cents, p.currency, ci.qty
            FROM cart_items ci JOIN products p ON p.id=ci.product_id
            WHERE ci.cart_id=?""", (cart_id,)).fetchall()

def add_to_cart(user_id: int, product_id: int, delta: int):
    with closing(db()) as conn, conn:
        cart_id = get_or_create_cart(user_id)
        row = conn.execute("SELECT id, qty FROM cart_items WHERE cart_id=? AND product_id=?",
                           (cart_id, product_id)).fetchone()
        if row:
            new_qty = row["qty"] + delta
            if new_qty <= 0:
                conn.execute("DELETE FROM cart_items WHERE id=?", (row["id"],))
            else:
                conn.execute("UPDATE cart_items SET qty=? WHERE id=?", (new_qty, row["id"]))
        elif delta > 0:
            conn.execute("INSERT INTO cart_items(cart_id, product_id, qty) VALUES(?,?,?)",
                         (cart_id, product_id, 1))
def add_to_cart_qty(user_id: int, product_id: int, qty: int):
    if qty <= 0:
        return
    with closing(db()) as conn, conn:
        cart_id = get_or_create_cart(user_id)
        row = conn.execute(
            "SELECT id, qty FROM cart_items WHERE cart_id=? AND product_id=?",
            (cart_id, product_id)
        ).fetchone()
        if row:
            new_qty = row["qty"] + qty
            conn.execute("UPDATE cart_items SET qty=? WHERE id=?", (new_qty, row["id"]))
        else:
            conn.execute("INSERT INTO cart_items(cart_id, product_id, qty) VALUES(?,?,?)",
                         (cart_id, product_id, qty))

def get_product_by_id(pid: int):
    with closing(db()) as conn:
        return conn.execute("SELECT * FROM products WHERE id=?", (pid,)).fetchone()

def delete_from_cart(user_id: int, product_id: int):
    with closing(db()) as conn, conn:
        cart_id = get_or_create_cart(user_id)
        conn.execute("DELETE FROM cart_items WHERE cart_id=? AND product_id=?", (cart_id, product_id))

def clear_cart(user_id: int):
    with closing(db()) as conn, conn:
        cart_id = get_or_create_cart(user_id)
        conn.execute("DELETE FROM cart_items WHERE cart_id=?", (cart_id,))

def cart_total_cents(user_id: int) -> int:
    return sum(r["price_cents"] * r["qty"] for r in cart_items(user_id))

def last_order(user_id: int):
    with closing(db()) as conn:
        row = conn.execute(
            "SELECT id, total_cents, currency, created_at FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 1",
            (user_id,)
        ).fetchone()
        return row  # –ª–∏–±–æ None

# ================ UI =================
def kb_main():
    kb = InlineKeyboardBuilder()
    kb.button(text="üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    add_change_city_button(kb)  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
    kb.adjust(2, 2)  # 2 –≤ —Ä—è–¥, –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–∂–µ —É–º–µ—Å—Ç–∏—Ç—Å—è
    return kb.as_markup()

def product_list_kb():
    kb = InlineKeyboardBuilder()
    prods = list_products()
    # –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞ —Ç–æ–≤–∞—Ä
    for p in prods:
        kb.button(text=p["title"], callback_data=f"prod:{p['id']}")
    # –Ω–∏–∑ ‚Äî –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    kb.button(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    add_change_city_button(kb)
    kb.button(text="‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="menu")
    # —Ä–∞–∑–ª–æ–∂–∏–º —Å–µ—Ç–∫–æ–π (3 –≤ —Ä—è–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤; –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2‚Äì3 –∫–Ω–æ–ø–∫–∏ —Å–∞–º–∏ –≤—Å—Ç–∞–Ω—É—Ç –Ω–∏–∂–µ)
    kb.adjust(3)
    return kb.as_markup()

@dp.callback_query(F.data == "menu")
async def cb_menu(cq: CallbackQuery):
    await cq.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())
    await cq.answer()

def add_change_city_button(kb: InlineKeyboardBuilder):
    kb.button(text="üåÜ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")

def cart_text(uid: int) -> str:
    items = cart_items(uid)
    if not items: return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    lines = []; total = 0
    for r in items:
        s = r["price_cents"] * r["qty"]; total += s
        lines.append(f"{r['title']} √ó {r['qty']} ‚Äî {s/100:.2f} {CURRENCY}")
    lines.append(f"\n–ò—Ç–æ–≥–æ: *{total/100:.2f} {CURRENCY}*")
    return "\n".join(lines)

def cart_kb(uid: int):
    items = cart_items(uid)
    kb = InlineKeyboardBuilder()
    for r in items:
        pid = r["product_id"]
        kb.button(text=f"‚ûñ {r['title']}", callback_data=f"dec:{pid}")
        kb.button(text=f"‚ûï {r['title']}", callback_data=f"inc:{pid}")
        kb.button(text=f"üóë {r['title']}", callback_data=f"del:{pid}")
    if items:
        kb.button(text="üßæ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear")

    add_change_city_button(kb)        # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
    kb.button(text="‚¨ÖÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.adjust(2)
    return kb.as_markup()

# 30 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–§ (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –∫–æ–¥—ã ‚Äî —É–¥–æ–±–Ω—ã –≤ –ë–î)
CITIES = [
    ("msk", "–ú–æ—Å–∫–≤–∞"),
    ("spb", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"),
    ("nsk", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"),
    ("ekb", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"),
    ("nnv", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"),
    ("kzn", "–ö–∞–∑–∞–Ω—å"),
    ("chn", "–ß–µ–ª—è–±–∏–Ω—Å–∫"),
    ("oms", "–û–º—Å–∫"),
    ("sam", "–°–∞–º–∞—Ä–∞"),
    ("rst", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É"),
    ("ufa", "–£—Ñ–∞"),
    ("krs", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"),
    ("prm", "–ü–µ—Ä–º—å"),
    ("vrn", "–í–æ—Ä–æ–Ω–µ–∂"),
    ("vol", "–í–æ–ª–≥–æ–≥—Ä–∞–¥"),
    ("kra", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"),
    ("srg", "–°–∞—Ä–∞—Ç–æ–≤"),
    ("tyu", "–¢—é–º–µ–Ω—å"),
    ("tol", "–¢–æ–ª—å—è—Ç—Ç–∏"),
    ("izv", "–ò–∂–µ–≤—Å–∫"),
    ("uly", "–£–ª—å—è–Ω–æ–≤—Å–∫"),
    ("bar", "–ë–∞—Ä–Ω–∞—É–ª"),
    ("irn", "–ò—Ä–∫—É—Ç—Å–∫"),
    ("kbr", "–ö–µ–º–µ—Ä–æ–≤–æ"),
    ("nnk", "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫"),
    ("stl", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å"),
    ("khn", "–•–∞–±–∞—Ä–æ–≤—Å–∫"),
    ("yar", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å"),
    ("vlr", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"),
    ("mah", "–ú–∞—Ö–∞—á–∫–∞–ª–∞"),
]

def city_kb():
    kb = InlineKeyboardBuilder()
    for code, name in CITIES:
        kb.button(text=name, callback_data=f"city:{code}")
    kb.adjust(2)  # –ø–æ 2 –≤ —Ä—è–¥; –º–æ–∂–Ω–æ 3: kb.adjust(3)
    return kb.as_markup()

def ensure_city_or_ask(user_id: int):
    code, name = get_user_city(user_id)
    return (code is not None), name

# ============== HANDLERS ==============
# üëã –ü—Ä–∏–≤–µ—Ç + –º–µ–Ω—é, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –≤—ã–±—Ä–∞–Ω
WELCOME_ANIM = "https://i.imgur.com/lP0ZJgb.gif"
WELCOME_TEXT = (
    "üòº–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å: —Å—á–∞—Å—Ç—å–µ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –Ω–∞—à—ë–ª, –∞ —Ç–µ–±—è –Ω–µ—Ç!üòé\n\n"
    " ‚ú®‚ú®‚ú®‚ú®‚ú®–û –Ω–∞—Å‚ú®‚ú®‚ú®‚ú®‚ú®\n\n"
    "‚úîÔ∏è –í–°–ï–ì–î–ê –û–¢–ö–†–´–¢–û: —Å—Ç–∞–∂ –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω–æ–π –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Äî —Å–≤—ã—à–µ 7 –ª–µ—Ç;\n\n"
    "‚úîÔ∏è –í–°–ï–ì–î–ê –û–¢–ö–†–´–¢–´: –Ω–∞—à –∫–æ–ª–ª–µ–∫—Ç–∏–≤ ‚Äî –∑–µ—Ä–∫–∞–ª–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –º–Ω–æ–≥–∏–µ –∏–∑ –Ω–∞—Å –∫–æ–≥–¥–∞-—Ç–æ –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–∏—à–ª–∏ –≤ Abyss –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏, –ø–æ—Ç–æ–º –∑–∞—á–∞—Å—Ç–∏–ª–∏, –∞ —Å–ª–µ–¥–æ–º –∏ –∑–∞—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –∫–∞—Ä—å–µ—Ä–Ω—É—é –ª–µ—Å—Ç–Ω–∏—Ü—É;\n\n"
    "‚úîÔ∏è –ö–ê–ß–ï–°–¢–í–û –ü–†–ï–í–´–®–ï –ê–°–°–û–†–¢–ò–ú–ï–ù–¢–ê: –Ω–∞—à–∞ –≤–∏—Ç—Ä–∏–Ω–∞ —Å—Ä–æ–¥–Ω–∏ –≤–∫–ª–∞–¥–∫–µ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª ‚Äî –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–µ–º —Ä–µ—à–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–∫–æ–≥–¥–∞ –ø—Ä–æ–±–æ–≤–∞—Ç—å –∏ –æ—à–∏–±–∞—Ç—å—Å—è;\n\n"
    "‚úîÔ∏è –õ–Æ–î–ò –ü–†–ï–ñ–î–ï –í–°–ï–ì–û: –∫–ª–∞–¥—ã –Ω–∞—Ö–æ–¥—è—Ç –∏ —É—Ö–æ–¥—è—Ç, –∞ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –ª–∏–±–æ –æ—Å—Ç–∞—ë—Ç—Å—è, –ª–∏–±–æ –Ω–µ—Ç. –û–±—â–∏–π —è–∑—ã–∫ ‚Äî —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π ¬´–ù–ê–•–û–î¬ª;\n\n"
    "‚úîÔ∏è –ß–ï–°–¢–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï: —Ä—ã–Ω–æ–∫ —Ü–µ–ª–∏–∫–æ–º –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ —á–µ—Å—Ç–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, –≤—Å–µ –∑–¥–µ—Å—å –∏—â—É—Ç –∏–º–µ–Ω–Ω–æ –µ–≥–æ, –∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–æ–≤–Ω–æ –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –Ω–∞—Ö–æ–¥—è—Ç. –ù–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã —É–∂–µ –Ω–∞—à–ª–∏;\n\n"
    "‚úîÔ∏è –ß–ê–°–¢–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï: –º—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ–º, —á–µ–º –ø–æ–º–æ—á—å –Ω–æ–≤–∏—á–∫—É, –∫–∞–∫ —É–¥–∏–≤–∏—Ç—å –∑–∞–≤—Å–µ–≥–¥–∞—Ç–∞—è –∏ —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–º–±–∏—Ü–∏–æ–∑–Ω–æ–º—É —ç–Ω—Ç—É–∑–∏–∞—Å—Ç—É."
)

@dp.message(Command("start"))
async def start(m: Message):
    # 1) –≤—Å–µ–≥–¥–∞ —à–ª—ë–º –ø—Ä–∏–≤–µ—Ç —Å –≥–∏—Ñ–∫–æ–π
    try:
        await m.answer_animation(animation=WELCOME_ANIM, caption=WELCOME_TEXT)
    except Exception:
        await m.answer(WELCOME_TEXT)

    # 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥
    has_city, city_name = ensure_city_or_ask(m.from_user.id)
    if not has_city:
        # –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_kb())
        return

    # 3) –≥–æ—Ä–æ–¥ —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å–ª–µ–¥–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await m.answer(f"üèô –í–∞—à –≥–æ—Ä–æ–¥: {city_name}")
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb_main())



@dp.callback_query(F.data.startswith("city:"))
async def choose_city(cq: CallbackQuery):
    code = cq.data.split(":")[1]
    # –Ω–∞–π–¥—ë–º –∏–º—è –ø–æ –∫–æ–¥—É
    name = next((n for c, n in CITIES if c == code), None)
    if not name:
        await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥", show_alert=True)
        return

    set_user_city(cq.from_user.id, code, name)
    await cq.message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω: {name}", reply_markup=kb_main())
    await cq.answer()

    # –£–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∞
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üèô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{cq.from_user.username or '‚Äî'} (id: {cq.from_user.id}) –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {name} ({code})"
            )
        except Exception:
            pass

@dp.message(Command("city"))
async def change_city(m: Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_kb())

@dp.callback_query(F.data == "change_city")
async def cb_change_city(cq: CallbackQuery):
    await cq.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_kb())
    await cq.answer()

@dp.callback_query(F.data == "catalog")
async def show_catalog(cq: CallbackQuery):
    # –±–ª–æ–∫: –±–µ–∑ –≥–æ—Ä–æ–¥–∞ –Ω–µ –ø—É—Å–∫–∞–µ–º
    has_city, _ = ensure_city_or_ask(cq.from_user.id)
    if not has_city:
        await cq.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_kb())
        await cq.answer(); return

    prods = list_products()
    if not prods:
        await cq.message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        await cq.answer(); return

    await cq.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=product_list_kb())
    await cq.answer()

# –ù–∞–∂–∞–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä ‚Üí —Å–ø—Ä–æ—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# –ù–∞–∂–∞–ª–∏ –Ω–∞ —Ç–æ–≤–∞—Ä ‚Üí —Å–ø—Ä–æ—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞)
@dp.callback_query(F.data.startswith("prod:"))
async def choose_product_qty(cq: CallbackQuery):
    pid = int(cq.data.split(":")[1])

    p = get_product_by_id(pid)
    if not p or not p["is_active"]:
        await cq.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
    kb = InlineKeyboardBuilder()
    for q in (1, 2, 10, 20):
        kb.button(text=f"{q}", callback_data=f"addqty:{pid}:{q}")
    kb.button(text="‚¨ÖÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.adjust(4, 1)

    caption = f"–ö–∞–∫–∞—è –≥—Ä–∞–º–º–æ–≤–∫–∞ ¬´{p['title']}¬ª?\n–¶–µ–Ω–∞: {p['price_cents']/100:.2f} {p['currency']}"

    # –ø—Ä–æ–±—É–µ–º –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ; –µ—Å–ª–∏ –Ω–µ—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞/file_id –±–∏—Ç—ã–µ ‚Äî –ø–æ—à–ª—ë–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    photo = p["photo_url"]  # –º–æ–∂–µ—Ç –±—ã—Ç—å HTTP(S) URL –∏–ª–∏ telegram file_id
    try:
        if photo:
            await cq.message.answer_photo(
                photo=photo,
                caption=caption,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=kb.as_markup()
            )
        else:
            raise ValueError("no photo")
    except Exception:
        await cq.message.answer(
            caption,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=kb.as_markup()
        )

    await cq.answer()



# –í—ã–±—Ä–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data.startswith("addqty:"))
async def add_with_qty(cq: CallbackQuery):
    _, pid_str, qty_str = cq.data.split(":")
    pid = int(pid_str); qty = int(qty_str)

    # –¥–æ–±–∞–≤–∏–º qty –µ–¥–∏–Ω–∏—Ü
    add_to_cart_qty(cq.from_user.id, pid, qty)

    await cq.message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {qty} –≥—Ä.")
    # –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é ‚Äî –Ω–∞ —Ç–≤–æ–π –≤–∫—É—Å
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")
    kb.button(text="‚¨ÖÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    kb.adjust(1, 1)
    await cq.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=kb.as_markup())
    await cq.answer()


@dp.callback_query(F.data.startswith("add:"))
async def add(cq: CallbackQuery):
    pid = int(cq.data.split(":")[1])
    add_to_cart(cq.from_user.id, pid, +1)
    await cq.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@dp.callback_query(F.data == "cart")
async def cart(cq: CallbackQuery):
    has_city, _ = ensure_city_or_ask(cq.from_user.id)
    if not has_city:
        await cq.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_kb())
        await cq.answer()
        return
    await cq.message.answer(cart_text(cq.from_user.id),
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=cart_kb(cq.from_user.id))
    await cq.answer()

@dp.callback_query(F.data.startswith(("inc:", "dec:", "del:")))
async def qty(cq: CallbackQuery):
    action, pid = cq.data.split(":"); pid = int(pid)
    if action == "inc": add_to_cart(cq.from_user.id, pid, +1)
    elif action == "dec": add_to_cart(cq.from_user.id, pid, -1)
    elif action == "del": delete_from_cart(cq.from_user.id, pid)
    await cq.message.edit_text(cart_text(cq.from_user.id),
                               parse_mode=ParseMode.MARKDOWN,
                               reply_markup=cart_kb(cq.from_user.id))
    await cq.answer()

@dp.callback_query(F.data == "clear")
async def clear(cq: CallbackQuery):
    clear_cart(cq.from_user.id)
    await cq.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=kb_main())
    await cq.answer()

@dp.callback_query(F.data == "checkout")
async def checkout(cq: CallbackQuery):
    uid = cq.from_user.id
    items = cart_items(uid)
    if not items:
        await cq.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True); return

    total = cart_total_cents(uid)

    # —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (–±–µ–∑ –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã)
    with closing(db()) as conn, conn:
        cur = conn.execute(
            "INSERT INTO orders(user_id, total_cents, currency, status) VALUES(?,?,?,?)",
            (uid, total, CURRENCY, "placed")
        )
        order_id = cur.lastrowid
        for r in items:
            conn.execute(
                "INSERT INTO order_items(order_id, product_id, title, price_cents, qty) VALUES(?,?,?,?,?)",
                (order_id, r["product_id"], r["title"], r["price_cents"], r["qty"])
            )
        # –æ—á–∏—Å—Ç–∏–º –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–∫—Ä–æ–µ–º —Ç–µ–∫—É—â—É—é
        cart_id = get_or_create_cart(uid)
        conn.execute("DELETE FROM cart_items WHERE cart_id=?", (cart_id,))
        conn.execute("UPDATE carts SET status='ordered' WHERE id=?", (cart_id,))

    text = (
        f"üßæ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω –Ω–∞ —Å—É–º–º—É *{total/100:.2f} {CURRENCY}*\n\n"
        f"{PAY_INSTRUCTIONS}"
    )
    await cq.message.answer(text, parse_mode=ParseMode.MARKDOWN)
    await cq.answer()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üÜï –ó–∞–∫–∞–∑ #{order_id} –æ—Ç @{cq.from_user.username or uid}\n"
                f"–°—É–º–º–∞: {total/100:.2f} {CURRENCY}"
            )
        except Exception:
            pass

# -------- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ --------
@dp.callback_query(F.data == "support")
async def support_btn(cq: CallbackQuery):
    await cq.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: /support –≤–∞—à_—Ç–µ–∫—Å—Ç")
    await cq.answer()

@dp.message(Command("support"))
async def support_cmd(m: Message):
    text = m.text.partition(" ")[2].strip()
    if not text:
        await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ: /support –≤–∞—à_–≤–æ–ø—Ä–æ—Å"); return
    await m.answer("üì® –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{m.from_user.username or '‚Äî'} (id: {m.from_user.id}):\n{text}"
            )
        except Exception:
            pass
# -------- –û—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–µ–∫—Å—Ç –ò–õ–ò –º–µ–¥–∏–∞) --------
@dp.message(Command("reply"))
async def admin_reply(m: Message):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if not (ADMIN_CHAT_ID and m.from_user.id == ADMIN_CHAT_ID):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    # ---------- —É—Ç–∏–ª–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—É–º–µ–µ—Ç —Ç–µ–∫—Å—Ç –∏ –º–µ–¥–∏–∞) ----------
    async def send_to_user(user_id: int, reply_text: str):
        # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –ø—Ä–∏—Å–ª–∞–ª –º–µ–¥–∏–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–º –∂–µ —Ç–∏–ø–æ–º
        if m.photo:
            # –±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            return await bot.send_photo(user_id, m.photo[-1].file_id, caption=reply_text or None)
        if m.document:
            return await bot.send_document(user_id, m.document.file_id, caption=reply_text or None)
        if m.video:
            return await bot.send_video(user_id, m.video.file_id, caption=reply_text or None)
        if m.animation:  # gif
            return await bot.send_animation(user_id, m.animation.file_id, caption=reply_text or None)
        if m.audio:
            return await bot.send_audio(user_id, m.audio.file_id, caption=reply_text or None)
        if m.voice:
            return await bot.send_voice(user_id, m.voice.file_id, caption=reply_text or None)
        # –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        return await bot.send_message(user_id, f"‚úâÔ∏è –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}")

    # ---------- –í–∞—Ä–∏–∞–Ω—Ç –ê: /reply –∫–∞–∫ –†–ï–ü–õ–ê–ô –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–æ—Ç–∞ ----------
    if m.reply_to_message:
        src = (m.reply_to_message.text or "") + "\n" + (m.reply_to_message.caption or "")
        import re
        id_match = re.search(r"id:\s*(\d+)", src)
        if id_match:
            user_id = int(id_match.group(1))
            # —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –≤—Å—ë –ø–æ—Å–ª–µ /reply (–≤ caption –∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞)
            reply_text = m.text.partition(" ")[2].strip() if m.text else (m.caption or "")
            try:
                await send_to_user(user_id, reply_text)
                return await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                return await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")
        # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ id ‚Äî —É–ø–∞–¥—ë–º –≤ –≤–∞—Ä–∏–∞–Ω—Ç B

    # ---------- –í–∞—Ä–∏–∞–Ω—Ç B: /reply <user_id|@username> <—Ç–µ–∫—Å—Ç> ----------
    # –í —ç—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –∫–æ–º–∞–Ω–¥–∞ –∏ —Ç–∞—Ä–≥–µ—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ/–ø–æ–¥–ø–∏—Å–∏
    raw = (m.text or m.caption or "").strip()
    parts = raw.split(maxsplit=2)
    if len(parts) < 3:
        return await m.answer(
            "–§–æ—Ä–º–∞—Ç:\n"
            "/reply <user_id –∏–ª–∏ @username> <—Ç–µ–∫—Å—Ç>\n"
            "–ò–õ–ò: –æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–æ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ: /reply –≤–∞—à_—Ç–µ–∫—Å—Ç\n"
            "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ/–¥–æ–∫/–≤–∏–¥–µ–æ."
        )

    target = parts[1]
    reply_text = parts[2].strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
    user_id = None
    if target.isdigit():
        user_id = int(target)
    elif target.startswith("@"):
        try:
            ch = await bot.get_chat(target)
            user_id = ch.id
        except Exception:
            return await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –ø–∏—Å–∞–ª –±–æ—Ç—É.")

    if not user_id:
        return await m.answer("–ù–µ –ø–æ–Ω—è–ª, –∫–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º. –£–∫–∞–∂–∏ —á–∏—Å–ª–æ–≤–æ–π id –∏–ª–∏ @username.")

    try:
        await send_to_user(user_id, reply_text)
        await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}")

# -------- –ß–µ–∫–∏ / –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã --------
# –õ–æ–≤–∏–º –º–µ–¥–∏–∞: —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ, –∞–Ω–∏–º–∞—Ü–∏—è ‚Äî –∏ —à–ª—ë–º –∞–¥–º–∏–Ω—É –∫–æ–ø–∏—é
@dp.message( F.photo | F.document | F.video | F.animation )
async def payment_proof_forwarder(m: Message):
    # —Å–æ–±–µ—Ä—ë–º –∏–Ω—Ñ–æ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–∫–∞–∑–µ
    lo = last_order(m.from_user.id)
    if lo:
        order_info = f"–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ #{lo['id']} –Ω–∞ {lo['total_cents']/100:.2f} {lo['currency']}"
    else:
        order_info = "–∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    header = (
        f"üì• –ß–µ–∫ –æ—Ç @{m.from_user.username or '‚Äî'} (id: {m.from_user.id})\n"
        f"‚ÑπÔ∏è {order_info}"
    )

    # —Å–æ–æ–±—â–∏–º –∞–¥–º–∏–Ω—É —Ç–µ–∫—Å—Ç–æ–º –∏ —Å–∫–æ–ø–∏—Ä—É–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, header)
            # copy_message —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–ø –∏ –≤–ª–æ–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ/–¥–æ–∫ –∏ —Ç.–¥.)
            await bot.copy_message(
                chat_id=ADMIN_CHAT_ID,
                from_chat_id=m.chat.id,
                message_id=m.message_id
            )
        except Exception:
            pass

    # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º.")

# ----- –ü—Ä–æ—Å—Ç—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_CHAT_ID) -----
def is_admin(uid: int) -> bool:
    return ADMIN_CHAT_ID and uid == ADMIN_CHAT_ID

# –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
@dp.message(Command("delp"))
async def delete_product_cmd(m: Message):
    if not (ADMIN_CHAT_ID and m.from_user.id == ADMIN_CHAT_ID):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    try:
        pid = int(m.text.split()[1])
    except Exception:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /delp <id>")
    with closing(db()) as conn, conn:
        conn.execute("DELETE FROM products WHERE id=?", (pid,))
    await m.answer(f"üóëÔ∏è –¢–æ–≤–∞—Ä {pid} —É–¥–∞–ª—ë–Ω.")

# /addp –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; https://...
@dp.message(Command("addp"))
async def add_product(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    raw = m.text.partition(" ")[2]
    parts = [p.strip() for p in raw.split(";")]
    if len(parts) < 2:
        return await m.answer('–§–æ—Ä–º–∞—Ç: /addp –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; https://photo\n(–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    title = parts[0]
    try:
        price_cents = int(round(float(parts[1].replace(",", ".")) * 100))
    except Exception:
        return await m.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 199.00)")
    desc = parts[2] if len(parts) > 2 else ""
    photo = parts[3] if len(parts) > 3 else None
    with closing(db()) as conn, conn:
        conn.execute(
            "INSERT INTO products(title, description, price_cents, currency, photo_url) VALUES(?,?,?,?,?)",
            (title, desc, price_cents, CURRENCY, photo)
        )
    await m.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ö–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ.")

# /hidep 3  (—Å–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä –ø–æ id)
@dp.message(Command("hidep"))
async def hide_product(m: Message):
    if not is_admin(m.from_user.id):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    pid = m.text.strip().split(" ")
    if len(pid) < 2 or not pid[1].isdigit():
        return await m.answer("–§–æ—Ä–º–∞—Ç: /hidep ID")
    with closing(db()) as conn, conn:
        conn.execute("UPDATE products SET is_active=0 WHERE id=?", (int(pid[1]),))
    await m.answer("‚úÖ –¢–æ–≤–∞—Ä —Å–∫—Ä—ã—Ç.")

@dp.message(Command("ls"))
async def list_products_cmd(m: Message):
    if not (ADMIN_CHAT_ID and m.from_user.id == ADMIN_CHAT_ID):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    prods = list_products()
    if not prods:
        return await m.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
    txt = "\n".join([f"{p['id']}: {p['title']} ({p['price_cents']/100:.2f} {p['currency']})"
                     for p in prods])
    await m.answer("üì¶ –¢–æ–≤–∞—Ä—ã:\n" + txt)


# /editp id ; –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; https://—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ
@dp.message(Command("editp"))
async def edit_product(m: Message):
    if not (ADMIN_CHAT_ID and m.from_user.id == ADMIN_CHAT_ID):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    raw = m.text.partition(" ")[2]
    parts = [p.strip() for p in raw.split(";")]
    if len(parts) < 2 or not parts[0].isdigit():
        return await m.answer(
            "–§–æ—Ä–º–∞—Ç: /editp id ; –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; https://—Å—Å—ã–ª–∫–∞\n"
            "(–ù–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ)"
        )

    pid = int(parts[0])
    updates = {}
    if len(parts) > 1 and parts[1]:
        updates["title"] = parts[1]
    if len(parts) > 2 and parts[2]:
        try:
            updates["price_cents"] = int(round(float(parts[2].replace(",", ".")) * 100))
        except Exception:
            return await m.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 199.00)")
    if len(parts) > 3:
        updates["description"] = parts[3]
    if len(parts) > 4:
        updates["photo_url"] = parts[4]

    if not updates:
        return await m.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

    q = "UPDATE products SET " + ", ".join(f"{k}=?" for k in updates.keys()) + " WHERE id=?"
    params = list(updates.values()) + [pid]

    with closing(db()) as conn, conn:
        conn.execute(q, params)

    await m.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{pid} –æ–±–Ω–æ–≤–ª—ë–Ω.")


# /adminhelp ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
@dp.message(Command("adminhelp"))
async def admin_help(m: Message):
    if not (ADMIN_CHAT_ID and m.from_user.id == ADMIN_CHAT_ID):
        return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    text = (
        "üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/ls ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/addp –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; —Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/hidep id ‚Äî —Å–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/editp id ; –ù–∞–∑–≤–∞–Ω–∏–µ ; 199.00 ; –û–ø–∏—Å–∞–Ω–∏–µ ; —Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/reply <user_id/@username> —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å\n"
        "/adminhelp ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
    )
    await m.answer(text)


# =============== ENTRY ===============
async def main():
    init_db()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä—É—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã). –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")